plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
	id 'jacoco'
}

group = 'teamVerde'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.postgresql:postgresql:42.6.0'
	testImplementation 'com.h2database:h2'
	implementation 'com.newrelic.agent.java:newrelic-api:7.6.0'
	testImplementation 'org.mockito.kotlin:mockito-kotlin:4.1.0'
}

kotlin {
	jvmToolchain {
		languageVersion.set(JavaLanguageVersion.of(21))
	}
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test

	reports {
		xml {
			destination file("$buildDir/reports/jacoco/test-coverage.xml")
		}
		html {
			destination file("$buildDir/reports/jacoco/html")
		}
	}

	classDirectories.setFrom(
			fileTree(dir: "$buildDir/classes/kotlin/main", includes: [
					'com/github/teamverdeingsis/snippetsPermission/service/**/*.class'
			])
	)
}


jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.25
			}
		}
	}
}


jacoco {
	toolVersion = '0.8.9'
}

tasks.check {
	dependsOn jacocoTestCoverageVerification
}

tasks.test {
	useJUnitPlatform()
	include '**/*Test.class'
	finalizedBy jacocoTestReport
}

